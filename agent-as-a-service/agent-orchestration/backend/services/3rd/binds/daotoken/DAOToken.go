// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package daotoken

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ERC20VotesCheckpoint is an auto generated low-level Go binding around an user-defined struct.
type ERC20VotesCheckpoint struct {
	FromBlock uint32
	Votes     *big.Int
}

// DAOTokenMetaData contains all meta data concerning the DAOToken contract.
var DAOTokenMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLOCK_MODE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pos\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"votes\",\"type\":\"uint224\"}],\"internalType\":\"structERC20Votes.Checkpoint\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clock\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6101608060405234620000c7576200319480380380916200002082620000e2565b833960408183019112620000c75781516001600160401b039290838111620000c757826200005091830162000160565b9161018051938411620000c75762000075936200006e920162000160565b90620001c6565b6040516120a09081620010d4823960805181611aa8015260a05181611b63015260c05181611a72015260e05181611af701526101005181611b1d015261012051816108040152610140518161082d0152f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b601f01601f1916610160908101906001600160401b038211908210176200010857604052565b620000cc565b604081019081106001600160401b038211176200010857604052565b6040519062000139826200010e565b565b60005b8381106200014f5750506000910152565b81810151838201526020016200013e565b81601f82011215620000c75780516001600160401b0392838211620001085760405193601f8301601f19908116603f0116850190811185821017620001085760405281845260208284010111620000c757620001c391602080850191016200013b565b90565b9190604051620001d6816200010e565b600193848252602080830193603160f81b8552825160018060401b038111620001085762000211816200020b60035462000331565b6200036e565b8297601f8211600114620002a5578180916200024c95969798999a60009362000299575b501b916000199060031b1c191617600355620004d2565b6200025782620005c5565b610120526200026683620006d5565b61014052815191012060e052519020610100524660a0526200028762000854565b6080523060c052620001393362000926565b88015192503862000235565b6003600052601f198216989091907fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9060005b8b81106200031b5750826200024c969798999a9b1062000301575b5050811b01600355620004d2565b87015160001960f88460031b161c191690553880620002f3565b87820151835591840191908601908601620002d8565b90600182811c9216801562000363575b60208310146200034d57565b634e487b7160e01b600052602260045260246000fd5b91607f169162000341565b601f81116200037b575050565b6000906003825260208220906020601f850160051c83019410620003bc575b601f0160051c01915b828110620003b057505050565b818155600101620003a3565b90925082906200039a565b601f8111620003d4575050565b6000906004825260208220906020601f850160051c8301941062000415575b601f0160051c01915b8281106200040957505050565b818155600101620003fc565b9092508290620003f3565b601f81116200042d575050565b6000906005825260208220906020601f850160051c830194106200046e575b601f0160051c01915b8281106200046257505050565b81815560010162000455565b90925082906200044c565b601f811162000486575050565b6000906006825260208220906020601f850160051c83019410620004c7575b601f0160051c01915b828110620004bb57505050565b818155600101620004ae565b9092508290620004a5565b80519091906001600160401b0381116200010857620004fe81620004f860045462000331565b620003c7565b602080601f83116001146200053d575081929360009262000531575b50508160011b916000199060031b1c191617600455565b0151905038806200051a565b6004600052601f198316949091907f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b926000905b878210620005ac57505083600195961062000592575b505050811b01600455565b015160001960f88460031b161c1916905538808062000587565b8060018596829496860151815501950193019062000571565b9081516020808210600014620005e357505090620001c390620007e5565b6001600160401b03821162000108576200060a826200060460055462000331565b62000420565b80601f83116001146200064a57508192936000926200063e575b50508160011b916000199060031b1c19161760055560ff90565b01519050388062000624565b6005600052601f198316949091907f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0926000905b878210620006bc575050836001959610620006a2575b505050811b0160055560ff90565b015160001960f88460031b161c1916905538808062000694565b806001859682949686015181550195019301906200067e565b9081516020808210600014620006f357505090620001c390620007e5565b6001600160401b03821162000108576200071a826200071460065462000331565b62000479565b80601f83116001146200075a57508192936000926200074e575b50508160011b916000199060031b1c19161760065560ff90565b01519050388062000734565b6006600052601f198316949091907ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f926000905b878210620007cc575050836001959610620007b2575b505050811b0160065560ff90565b015160001960f88460031b161c19169055388080620007a4565b806001859682949686015181550195019301906200078e565b601f8151116200081357602081519101516020821062000803571790565b6000198260200360031b1b161790565b6044604051809263305a27a960e01b8252602060048301526200084681518092816024860152602086860191016200013b565b601f01601f19168101030190fd5b60e051610100516040519060208201927f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8452604083015260608201524660808201523060a082015260a0815260c0810181811060018060401b03821117620001085760405251902090565b15620008c857565b60405162461bcd60e51b815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201526f766572666c6f77696e6720766f74657360801b6064820152608490fd5b6001600160a01b038116908115620009f757600254916b033b2e3c9fd0803ce8000000808401809411620009f15762000962620009cb94600255565b6001600160a01b038316600090815260208190526040902090815401905560007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405180620009c281906b033b2e3c9fd0803ce8000000602083019252565b0390a362000fa5565b600254620009e3906001600160e01b031015620008c0565b620009ed62000b5c565b5050565b62000a3c565b60405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b604080519192919081016001600160401b038111828210176200010857604052602081935463ffffffff81168352811c910152565b600b54906801000000000000000082101562000108576001820180600b5582101562000af557600b600052805160209182015190911b63ffffffff191663ffffffff91909116177f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db990910155565b634e487b7160e01b600052603260045260246000fd5b9081546801000000000000000081101562000108576001810180845581101562000af557600092835260209283902082519284015190931b63ffffffff191663ffffffff9290921691909117910155565b600b5490811590811562000ca35762000b746200012a565b6000815260006020820152925b602084015162000ba1906001600160e01b03165b6001600160e01b031690565b9362000bad856200109e565b9315908162000c7c575b501562000c1457620001399062000bfd62000bd28562000e6d565b600b600052917f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db80190565b9063ffffffff82549181199060201b169116179055565b506200013962000c3d62000c3762000c2c4362000ed7565b65ffffffffffff1690565b62000f3f565b62000c7662000c4c8562000e6d565b62000c6662000c5a6200012a565b63ffffffff9094168452565b6001600160e01b03166020830152565b62000a87565b5163ffffffff16905063ffffffff62000c9962000c2c4362000ed7565b9116143862000bb7565b600b60005262000cdb7f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db8840162000a52565b62000a52565b9262000b81565b805491821591821562000de25762000cf96200012a565b6000815260006020820152935b602085015162000d1f906001600160e01b031662000b95565b9462000d2b86620010b8565b9415908162000dbb575b501562000d625762000bfd620001399262000d508662000e6d565b92600019019060005260206000200190565b50620001399062000d7b62000c3762000c2c4362000ed7565b9062000db562000d8b8662000e6d565b62000da562000d996200012a565b63ffffffff9095168552565b6001600160e01b03166020840152565b62000b0b565b5163ffffffff16905063ffffffff62000dd862000c2c4362000ed7565b9116143862000d35565b62000dfc62000cd560001986018360005260206000200190565b9362000d06565b805491821591821562000e4c5762000e1a6200012a565b6000815260006020820152935b602085015162000e40906001600160e01b031662000b95565b9462000d2b866200109e565b62000e6662000cd560001986018360005260206000200190565b9362000e27565b6001600160e01b039081811162000e82571690565b60405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b6064820152608490fd5b65ffffffffffff9081811162000eeb571690565b60405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203460448201526538206269747360d01b6064820152608490fd5b63ffffffff9081811162000f51571690565b60405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b6064820152608490fd5b60096020527fec8156718a8372b1db44bb411437d0870f3e3790d4a08526d024ce1b0b668f6b546001600160a01b039182166000908152604081205483169290911690818314158062001095575b62000ffd57505050565b8162001056575b5050806200100f5750565b6001600160a01b0381166000908152600a602052604090206000805160206200317483398151915290620010439062000e03565b60408051928352602083019190915290a2565b6200107c60408284600080516020620031748339815191529452600a6020522062000ce2565b60408051928352602083019190915290a2388062001004565b50600162000ff3565b6b033b2e3c9fd0803ce80000008101809111620009f15790565b6b033b2e3c9fd0803ce7ffffff198101908111620009f1579056fe6080604052600436101561001257600080fd5b60003560e01c806306fdde03146101a7578063095ea7b3146101a257806318160ddd1461019d57806323b872dd14610198578063313ce567146101935780633644e5151461018e57806339509351146101895780633a46b1a8146101845780634bf5d7e91461017f578063587cde1e1461017a5780635c19a95c146101755780636fcfff451461017057806370a082311461016b5780637ecebe001461016657806384b0196e146101615780638e539e8c1461015c57806391ddadf41461015757806395d89b41146101525780639ab24eb01461014d578063a457c2d714610148578063a9059cbb14610143578063c3cda5201461013e578063d505accf14610139578063dd62ed3e146101345763f1127ed81461012f57600080fd5b610f2c565b610ed4565b610d8e565b610c63565b610c1d565b610b6f565b610b0d565b610a66565b610a3a565b6108e1565b6107e9565b6107af565b610775565b61072d565b610709565b6106ce565b61061c565b6104c7565b61046f565b61044c565b610430565b610365565b610347565b610316565b610200565b919082519283825260005b8481106101d8575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016101b7565b9060206101fd9281815201906101ac565b90565b346102e5576000806003193601126102e257604051908060035461022381610fb3565b808552916001918083169081156102b8575060011461025d575b6102598561024d8187038261105c565b604051918291826101ec565b0390f35b9250600383527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8284106102a057505050810160200161024d8261025961023d565b80546020858701810191909152909301928101610285565b8695506102599693506020925061024d94915060ff191682840152151560051b820101929361023d565b80fd5b600080fd5b600435906001600160a01b03821682036102e557565b602435906001600160a01b03821682036102e557565b346102e55760403660031901126102e55761033c6103326102ea565b6024359033611263565b602060405160018152f35b346102e55760003660031901126102e5576020600254604051908152f35b346102e55760603660031901126102e55761037e6102ea565b610386610300565b6001600160a01b0382166000908152600160209081526040808320338452909152902060443591905492600184016103cf575b6103c39350611155565b60405160018152602090f35b8284106103eb576103e6836103c395033383611263565b6103b9565b60405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606490fd5b346102e55760003660031901126102e557602060405160128152f35b346102e55760003660031901126102e5576020610467611a6f565b604051908152f35b346102e55760403660031901126102e5576104886102ea565b3360009081526001602090815260408083206001600160a01b038516845290915290205460243581018091116104c25761033c9133611263565b61107e565b346102e55760403660031901126102e5576104e06102ea565b602435906104ff65ffffffffffff6104f743611f52565b16831061143c565b6001600160a01b03166000908152600a60205260408120805492909183600581116105cb575b50905b8382106105765750508161054f575050602060005b6040516001600160e01b039091168152f35b61056a61057191602093600019019060005260206000200190565b5460201c90565b61053d565b90926105828185611d82565b90818363ffffffff6105a861059e848960005260206000200190565b5463ffffffff1690565b1611156105b9575050925b90610528565b9094506105c69150611094565b6105b3565b806105db6105e192969396611d97565b90611488565b908263ffffffff6105fc61059e858860005260206000200190565b16111561060c5750925b38610525565b935061061790611094565b610606565b346102e55760003660031901126102e5574365ffffffffffff61063e43611f52565b16036106895761025960405161065381611003565b601d81527f6d6f64653d626c6f636b6e756d6265722666726f6d3d64656661756c740000006020820152604051918291826101ec565b60405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a2062726f6b656e20636c6f636b206d6f64650000006044820152606490fd5b346102e55760203660031901126102e55760206001600160a01b03806106f26102ea565b166000526009825260406000205416604051908152f35b346102e55760203660031901126102e55761072b6107256102ea565b336114e1565b005b346102e55760203660031901126102e5576001600160a01b0361074e6102ea565b16600052600a6020526020610767604060002054611fb9565b63ffffffff60405191168152f35b346102e55760203660031901126102e5576001600160a01b036107966102ea565b1660005260006020526020604060002054604051908152f35b346102e55760203660031901126102e5576001600160a01b036107d06102ea565b1660005260076020526020604060002054604051908152f35b346102e5576000806003193601126102e257610893906108287f0000000000000000000000000000000000000000000000000000000000000000611baf565b6108517f0000000000000000000000000000000000000000000000000000000000000000611ca8565b916040519161085f83611024565b818352604051948594600f60f81b865261088560209360e08589015260e08801906101ac565b9086820360408801526101ac565b904660608601523060808601528260a086015284820360c08601528080855193848152019401925b8281106108ca57505050500390f35b8351855286955093810193928101926001016108bb565b346102e55760203660031901126102e55760043561091065ffffffffffff61090843611f52565b16821061143c565b600b5490600082600581116109d3575b50905b82821061097057828061093d575060405160008152602090f35b600b600052602090610571907f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db80161056a565b909161097c8184611d82565b600b600052908263ffffffff6109b37f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9850161059e565b1611156109c35750915b90610923565b92506109ce90611094565b6109bd565b806105db6109e392959395611d97565b600b600052908263ffffffff610a1a7f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9850161059e565b161115610a2a5750915b38610920565b9250610a3590611094565b610a24565b346102e55760003660031901126102e5576020610a5643611f52565b65ffffffffffff60405191168152f35b346102e5576000806003193601126102e2576040519080600454610a8981610fb3565b808552916001918083169081156102b85750600114610ab2576102598561024d8187038261105c565b9250600483527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b828410610af557505050810160200161024d8261025961023d565b80546020858701810191909152909301928101610ada565b346102e55760203660031901126102e5576001600160a01b03610b2e6102ea565b16600052600a602052604060002080548015600014610b5557505060405160008152602090f35b602091610b669160001901906113ec565b5054811c61053d565b346102e55760403660031901126102e557610b886102ea565b60243590336000526001602052610bb58160406000209060018060a01b0316600052602052604060002090565b5491808310610bca576103c392039033611263565b60405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608490fd5b346102e55760403660031901126102e55761033c610c396102ea565b6024359033611155565b6064359060ff821682036102e557565b6084359060ff821682036102e557565b346102e55760c03660031901126102e557610c7c6102ea565b60443590602435610c8b610c43565b92804211610d4957610d1b610d449161072b9560405190610d0382610cf56020820195898b8860609194939260808201957fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf835260018060a01b0316602083015260408201520152565b03601f19810184528361105c565b610d1660a4359360843593519020611b89565b611889565b6001600160a01b0381166000908152600760205260409020805460018101909155909214611495565b6114e1565b60405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a207369676e617475726520657870697265640000006044820152606490fd5b346102e55760e03660031901126102e557610da76102ea565b610daf610300565b6044359060643592610dbf610c53565b93804211610e8f57610e77610e8a91610cf561072b97610e64610dfd8760018060a01b03166000526007602052604060002090815491600183019055565b604080517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9602082019081526001600160a01b03808c1693830193909352918b166060820152608081018c905260a081019290925260c082019590955292839060e0820190565b610d1660c4359360a43593519020611b89565b6001600160a01b03838116911614611393565b611263565b60405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606490fd5b346102e55760403660031901126102e5576020610f23610ef26102ea565b610efa610300565b6001600160a01b0391821660009081526001855260408082209290931681526020919091522090565b54604051908152f35b346102e55760403660031901126102e557610f456102ea565b63ffffffff60243581811681036102e557610f8f610f9591604094600060208751610f6f81611003565b82815201526001600160a01b03166000908152600a6020528590206113ec565b5061141a565b8251815190921682526020908101516001600160e01b031690820152f35b90600182811c92168015610fe3575b6020831014610fcd57565b634e487b7160e01b600052602260045260246000fd5b91607f1691610fc2565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761101f57604052565b610fed565b6020810190811067ffffffffffffffff82111761101f57604052565b60c0810190811067ffffffffffffffff82111761101f57604052565b90601f8019910116810190811067ffffffffffffffff82111761101f57604052565b634e487b7160e01b600052601160045260246000fd5b90600182018092116104c257565b156110a957565b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b1561110157565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b6001600160a01b0392919083811680156112105761120e9483169061117b8215156110a2565b6001600160a01b03831660009081526020819052604090208590546111a2828210156110fa565b036111bf8460018060a01b03166000526000602052604060002090565b556001600160a01b0384166000908152602081815260409182902080548801905590518681527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9190a361201e565b565b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b0380821692919083156113425782169384156112f257806112dc7f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925946112c56112ed9560018060a01b03166000526001602052604060002090565b9060018060a01b0316600052602052604060002090565b556040519081529081906020820190565b0390a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b1561139a57565b60405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606490fd5b6040519061120e82611003565b80548210156114045760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b9060405161142781611003565b602081935463ffffffff81168352811c910152565b1561144357565b60405162461bcd60e51b815260206004820152601960248201527f4552433230566f7465733a20667574757265206c6f6f6b7570000000000000006044820152606490fd5b919082039182116104c257565b1561149c57565b60405162461bcd60e51b815260206004820152601960248201527f4552433230566f7465733a20696e76616c6964206e6f6e6365000000000000006044820152606490fd5b61120e9160018060a01b038092166000928184526009602052806040852054168092856020527f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f60408720549660096020526040812094871694856bffffffffffffffffffffffff60a01b82541617905580a45b6001600160a01b03808316939291168084141580611768575b611579575b50505050565b806115e7575b508261158c575b80611573565b6001600160a01b03166000908152600a602052604090207fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724916115ce916117d0565b60408051928352602083019190915290a2388080611586565b80600052600a6020527fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72460406000208054801591826000146117455761162b6113df565b6000815260006020820152915b6020830151611657906001600160e01b03165b6001600160e01b031690565b926116628985612050565b94159081611722575b50156116c0576116936116aa9261168186611ee9565b92600019019060005260206000200190565b9063ffffffff82549181199060201b169116179055565b604080519182526020820192909252a23861157f565b5061171d906116e46116df6116d443611f52565b65ffffffffffff1690565b611fb9565b906117186116f186611ee9565b6117086116fc6113df565b63ffffffff9095168552565b6001600160e01b03166020840152565b611771565b6116aa565b5163ffffffff16905063ffffffff61173c6116d443611f52565b9116143861166b565b61176261175d60001984018360005260206000200190565b61141a565b91611638565b5082151561156e565b80546801000000000000000081101561101f57611793916001820181556113ec565b6117ba57815160209283015190921b63ffffffff191663ffffffff92909216919091179055565b634e487b7160e01b600052600060045260246000fd5b90918154918215928360001461186c576117e86113df565b60008152600060208201525b60208101516118169061180f906001600160e01b031661164b565b968761205d565b94159081611849575b50156118355761169361120e9261168186611ee9565b5061120e906116e46116df6116d443611f52565b5163ffffffff16905063ffffffff6118636116d443611f52565b9116143861181f565b61188461175d60001983018460005260206000200190565b6117f4565b916101fd9391611898936119e0565b9190916118c0565b600511156118aa57565b634e487b7160e01b600052602160045260246000fd5b6118c9816118a0565b806118d15750565b6118da816118a0565b600181036119275760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606490fd5b611930816118a0565b6002810361197d5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606490fd5b806119896003926118a0565b1461199057565b60405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608490fd5b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311611a635791608094939160ff602094604051948552168484015260408301526060820152600093849182805260015afa15611a565781516001600160a01b03811615611a50579190565b50600190565b50604051903d90823e3d90fd5b50505050600090600390565b307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161480611b60575b15611aca577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f82527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260a08152611b5a81611040565b51902090565b507f00000000000000000000000000000000000000000000000000000000000000004614611aa1565b604290611b94611a6f565b906040519161190160f01b8352600283015260228201522090565b60ff8114611bed5760ff811690601f8211611bdb5760405191611bd183611003565b8252602082015290565b604051632cd44ac360e21b8152600490fd5b50604051600554816000611c0083610fb3565b80835292600190818116908115611c865750600114611c27575b506101fd9250038261105c565b6005600090815291507f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b848310611c6b57506101fd935050810160200138611c1a565b81935090816020925483858901015201910190918492611c52565b9050602092506101fd94915060ff191682840152151560051b82010138611c1a565b60ff8114611cca5760ff811690601f8211611bdb5760405191611bd183611003565b50604051600654816000611cdd83610fb3565b80835292600190818116908115611c865750600114611d0357506101fd9250038261105c565b6006600090815291507ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f5b848310611d4757506101fd935050810160200138611c1a565b81935090816020925483858901015201910190918492611d2e565b8115611d6c570490565b634e487b7160e01b600052601260045260246000fd5b90808216911860011c81018091116104c25790565b8015611ed15780611e6a611e63611e59611e4f611e45611e3b611e31611e2760016101fd9a6000908b60801c80611ec5575b508060401c80611eb8575b508060201c80611eab575b508060101c80611e9e575b508060081c80611e91575b508060041c80611e84575b508060021c80611e77575b50821c611e70575b811c1b611e20818b611d62565b0160011c90565b611e20818a611d62565b611e208189611d62565b611e208188611d62565b611e208187611d62565b611e208186611d62565b611e208185611d62565b8092611d62565b90611ed7565b8101611e13565b6002915091019038611e0b565b6004915091019038611e00565b6008915091019038611df5565b6010915091019038611dea565b6020915091019038611ddf565b6040915091019038611dd4565b91505060809038611dc9565b50600090565b9080821015611ee4575090565b905090565b6001600160e01b0390818111611efd571690565b60405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b6064820152608490fd5b65ffffffffffff90818111611f65571690565b60405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203460448201526538206269747360d01b6064820152608490fd5b63ffffffff90818111611fca571690565b60405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b6064820152608490fd5b6001600160a01b0390811660009081526009602052604080822054938316825290205461120e93929082169116611555565b9081039081116104c25790565b9081018091116104c2579056fea2646970667358221220d461b5581fb88a442c92a03bef0da11de6fbf01ab2396372656b8fe983cf804b64736f6c63430008130033dec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724",
}

// DAOTokenABI is the input ABI used to generate the binding from.
// Deprecated: Use DAOTokenMetaData.ABI instead.
var DAOTokenABI = DAOTokenMetaData.ABI

// DAOTokenBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DAOTokenMetaData.Bin instead.
var DAOTokenBin = DAOTokenMetaData.Bin

// DeployDAOToken deploys a new Ethereum contract, binding an instance of DAOToken to it.
func DeployDAOToken(auth *bind.TransactOpts, backend bind.ContractBackend, name string, symbol string) (common.Address, *types.Transaction, *DAOToken, error) {
	parsed, err := DAOTokenMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DAOTokenBin), backend, name, symbol)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DAOToken{DAOTokenCaller: DAOTokenCaller{contract: contract}, DAOTokenTransactor: DAOTokenTransactor{contract: contract}, DAOTokenFilterer: DAOTokenFilterer{contract: contract}}, nil
}

// DAOToken is an auto generated Go binding around an Ethereum contract.
type DAOToken struct {
	DAOTokenCaller     // Read-only binding to the contract
	DAOTokenTransactor // Write-only binding to the contract
	DAOTokenFilterer   // Log filterer for contract events
}

// DAOTokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type DAOTokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DAOTokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DAOTokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DAOTokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DAOTokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DAOTokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DAOTokenSession struct {
	Contract     *DAOToken         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DAOTokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DAOTokenCallerSession struct {
	Contract *DAOTokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// DAOTokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DAOTokenTransactorSession struct {
	Contract     *DAOTokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// DAOTokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type DAOTokenRaw struct {
	Contract *DAOToken // Generic contract binding to access the raw methods on
}

// DAOTokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DAOTokenCallerRaw struct {
	Contract *DAOTokenCaller // Generic read-only contract binding to access the raw methods on
}

// DAOTokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DAOTokenTransactorRaw struct {
	Contract *DAOTokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDAOToken creates a new instance of DAOToken, bound to a specific deployed contract.
func NewDAOToken(address common.Address, backend bind.ContractBackend) (*DAOToken, error) {
	contract, err := bindDAOToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DAOToken{DAOTokenCaller: DAOTokenCaller{contract: contract}, DAOTokenTransactor: DAOTokenTransactor{contract: contract}, DAOTokenFilterer: DAOTokenFilterer{contract: contract}}, nil
}

// NewDAOTokenCaller creates a new read-only instance of DAOToken, bound to a specific deployed contract.
func NewDAOTokenCaller(address common.Address, caller bind.ContractCaller) (*DAOTokenCaller, error) {
	contract, err := bindDAOToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DAOTokenCaller{contract: contract}, nil
}

// NewDAOTokenTransactor creates a new write-only instance of DAOToken, bound to a specific deployed contract.
func NewDAOTokenTransactor(address common.Address, transactor bind.ContractTransactor) (*DAOTokenTransactor, error) {
	contract, err := bindDAOToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DAOTokenTransactor{contract: contract}, nil
}

// NewDAOTokenFilterer creates a new log filterer instance of DAOToken, bound to a specific deployed contract.
func NewDAOTokenFilterer(address common.Address, filterer bind.ContractFilterer) (*DAOTokenFilterer, error) {
	contract, err := bindDAOToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DAOTokenFilterer{contract: contract}, nil
}

// bindDAOToken binds a generic wrapper to an already deployed contract.
func bindDAOToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := DAOTokenMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DAOToken *DAOTokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DAOToken.Contract.DAOTokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DAOToken *DAOTokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DAOToken.Contract.DAOTokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DAOToken *DAOTokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DAOToken.Contract.DAOTokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DAOToken *DAOTokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DAOToken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DAOToken *DAOTokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DAOToken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DAOToken *DAOTokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DAOToken.Contract.contract.Transact(opts, method, params...)
}

// CLOCKMODE is a free data retrieval call binding the contract method 0x4bf5d7e9.
//
// Solidity: function CLOCK_MODE() view returns(string)
func (_DAOToken *DAOTokenCaller) CLOCKMODE(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _DAOToken.contract.Call(opts, &out, "CLOCK_MODE")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// CLOCKMODE is a free data retrieval call binding the contract method 0x4bf5d7e9.
//
// Solidity: function CLOCK_MODE() view returns(string)
func (_DAOToken *DAOTokenSession) CLOCKMODE() (string, error) {
	return _DAOToken.Contract.CLOCKMODE(&_DAOToken.CallOpts)
}

// CLOCKMODE is a free data retrieval call binding the contract method 0x4bf5d7e9.
//
// Solidity: function CLOCK_MODE() view returns(string)
func (_DAOToken *DAOTokenCallerSession) CLOCKMODE() (string, error) {
	return _DAOToken.Contract.CLOCKMODE(&_DAOToken.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_DAOToken *DAOTokenCaller) DOMAINSEPARATOR(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _DAOToken.contract.Call(opts, &out, "DOMAIN_SEPARATOR")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_DAOToken *DAOTokenSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _DAOToken.Contract.DOMAINSEPARATOR(&_DAOToken.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_DAOToken *DAOTokenCallerSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _DAOToken.Contract.DOMAINSEPARATOR(&_DAOToken.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_DAOToken *DAOTokenCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _DAOToken.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_DAOToken *DAOTokenSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _DAOToken.Contract.Allowance(&_DAOToken.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_DAOToken *DAOTokenCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _DAOToken.Contract.Allowance(&_DAOToken.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_DAOToken *DAOTokenCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _DAOToken.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_DAOToken *DAOTokenSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _DAOToken.Contract.BalanceOf(&_DAOToken.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_DAOToken *DAOTokenCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _DAOToken.Contract.BalanceOf(&_DAOToken.CallOpts, account)
}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint32,uint224))
func (_DAOToken *DAOTokenCaller) Checkpoints(opts *bind.CallOpts, account common.Address, pos uint32) (ERC20VotesCheckpoint, error) {
	var out []interface{}
	err := _DAOToken.contract.Call(opts, &out, "checkpoints", account, pos)

	if err != nil {
		return *new(ERC20VotesCheckpoint), err
	}

	out0 := *abi.ConvertType(out[0], new(ERC20VotesCheckpoint)).(*ERC20VotesCheckpoint)

	return out0, err

}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint32,uint224))
func (_DAOToken *DAOTokenSession) Checkpoints(account common.Address, pos uint32) (ERC20VotesCheckpoint, error) {
	return _DAOToken.Contract.Checkpoints(&_DAOToken.CallOpts, account, pos)
}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint32,uint224))
func (_DAOToken *DAOTokenCallerSession) Checkpoints(account common.Address, pos uint32) (ERC20VotesCheckpoint, error) {
	return _DAOToken.Contract.Checkpoints(&_DAOToken.CallOpts, account, pos)
}

// Clock is a free data retrieval call binding the contract method 0x91ddadf4.
//
// Solidity: function clock() view returns(uint48)
func (_DAOToken *DAOTokenCaller) Clock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DAOToken.contract.Call(opts, &out, "clock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Clock is a free data retrieval call binding the contract method 0x91ddadf4.
//
// Solidity: function clock() view returns(uint48)
func (_DAOToken *DAOTokenSession) Clock() (*big.Int, error) {
	return _DAOToken.Contract.Clock(&_DAOToken.CallOpts)
}

// Clock is a free data retrieval call binding the contract method 0x91ddadf4.
//
// Solidity: function clock() view returns(uint48)
func (_DAOToken *DAOTokenCallerSession) Clock() (*big.Int, error) {
	return _DAOToken.Contract.Clock(&_DAOToken.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_DAOToken *DAOTokenCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _DAOToken.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_DAOToken *DAOTokenSession) Decimals() (uint8, error) {
	return _DAOToken.Contract.Decimals(&_DAOToken.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_DAOToken *DAOTokenCallerSession) Decimals() (uint8, error) {
	return _DAOToken.Contract.Decimals(&_DAOToken.CallOpts)
}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_DAOToken *DAOTokenCaller) Delegates(opts *bind.CallOpts, account common.Address) (common.Address, error) {
	var out []interface{}
	err := _DAOToken.contract.Call(opts, &out, "delegates", account)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_DAOToken *DAOTokenSession) Delegates(account common.Address) (common.Address, error) {
	return _DAOToken.Contract.Delegates(&_DAOToken.CallOpts, account)
}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_DAOToken *DAOTokenCallerSession) Delegates(account common.Address) (common.Address, error) {
	return _DAOToken.Contract.Delegates(&_DAOToken.CallOpts, account)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_DAOToken *DAOTokenCaller) Eip712Domain(opts *bind.CallOpts) (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	var out []interface{}
	err := _DAOToken.contract.Call(opts, &out, "eip712Domain")

	outstruct := new(struct {
		Fields            [1]byte
		Name              string
		Version           string
		ChainId           *big.Int
		VerifyingContract common.Address
		Salt              [32]byte
		Extensions        []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Fields = *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)
	outstruct.Name = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Version = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.ChainId = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.VerifyingContract = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Salt = *abi.ConvertType(out[5], new([32]byte)).(*[32]byte)
	outstruct.Extensions = *abi.ConvertType(out[6], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_DAOToken *DAOTokenSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _DAOToken.Contract.Eip712Domain(&_DAOToken.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_DAOToken *DAOTokenCallerSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _DAOToken.Contract.Eip712Domain(&_DAOToken.CallOpts)
}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 timepoint) view returns(uint256)
func (_DAOToken *DAOTokenCaller) GetPastTotalSupply(opts *bind.CallOpts, timepoint *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _DAOToken.contract.Call(opts, &out, "getPastTotalSupply", timepoint)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 timepoint) view returns(uint256)
func (_DAOToken *DAOTokenSession) GetPastTotalSupply(timepoint *big.Int) (*big.Int, error) {
	return _DAOToken.Contract.GetPastTotalSupply(&_DAOToken.CallOpts, timepoint)
}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 timepoint) view returns(uint256)
func (_DAOToken *DAOTokenCallerSession) GetPastTotalSupply(timepoint *big.Int) (*big.Int, error) {
	return _DAOToken.Contract.GetPastTotalSupply(&_DAOToken.CallOpts, timepoint)
}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 timepoint) view returns(uint256)
func (_DAOToken *DAOTokenCaller) GetPastVotes(opts *bind.CallOpts, account common.Address, timepoint *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _DAOToken.contract.Call(opts, &out, "getPastVotes", account, timepoint)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 timepoint) view returns(uint256)
func (_DAOToken *DAOTokenSession) GetPastVotes(account common.Address, timepoint *big.Int) (*big.Int, error) {
	return _DAOToken.Contract.GetPastVotes(&_DAOToken.CallOpts, account, timepoint)
}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 timepoint) view returns(uint256)
func (_DAOToken *DAOTokenCallerSession) GetPastVotes(account common.Address, timepoint *big.Int) (*big.Int, error) {
	return _DAOToken.Contract.GetPastVotes(&_DAOToken.CallOpts, account, timepoint)
}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_DAOToken *DAOTokenCaller) GetVotes(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _DAOToken.contract.Call(opts, &out, "getVotes", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_DAOToken *DAOTokenSession) GetVotes(account common.Address) (*big.Int, error) {
	return _DAOToken.Contract.GetVotes(&_DAOToken.CallOpts, account)
}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_DAOToken *DAOTokenCallerSession) GetVotes(account common.Address) (*big.Int, error) {
	return _DAOToken.Contract.GetVotes(&_DAOToken.CallOpts, account)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_DAOToken *DAOTokenCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _DAOToken.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_DAOToken *DAOTokenSession) Name() (string, error) {
	return _DAOToken.Contract.Name(&_DAOToken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_DAOToken *DAOTokenCallerSession) Name() (string, error) {
	return _DAOToken.Contract.Name(&_DAOToken.CallOpts)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_DAOToken *DAOTokenCaller) Nonces(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _DAOToken.contract.Call(opts, &out, "nonces", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_DAOToken *DAOTokenSession) Nonces(owner common.Address) (*big.Int, error) {
	return _DAOToken.Contract.Nonces(&_DAOToken.CallOpts, owner)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_DAOToken *DAOTokenCallerSession) Nonces(owner common.Address) (*big.Int, error) {
	return _DAOToken.Contract.Nonces(&_DAOToken.CallOpts, owner)
}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_DAOToken *DAOTokenCaller) NumCheckpoints(opts *bind.CallOpts, account common.Address) (uint32, error) {
	var out []interface{}
	err := _DAOToken.contract.Call(opts, &out, "numCheckpoints", account)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_DAOToken *DAOTokenSession) NumCheckpoints(account common.Address) (uint32, error) {
	return _DAOToken.Contract.NumCheckpoints(&_DAOToken.CallOpts, account)
}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_DAOToken *DAOTokenCallerSession) NumCheckpoints(account common.Address) (uint32, error) {
	return _DAOToken.Contract.NumCheckpoints(&_DAOToken.CallOpts, account)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_DAOToken *DAOTokenCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _DAOToken.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_DAOToken *DAOTokenSession) Symbol() (string, error) {
	return _DAOToken.Contract.Symbol(&_DAOToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_DAOToken *DAOTokenCallerSession) Symbol() (string, error) {
	return _DAOToken.Contract.Symbol(&_DAOToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_DAOToken *DAOTokenCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DAOToken.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_DAOToken *DAOTokenSession) TotalSupply() (*big.Int, error) {
	return _DAOToken.Contract.TotalSupply(&_DAOToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_DAOToken *DAOTokenCallerSession) TotalSupply() (*big.Int, error) {
	return _DAOToken.Contract.TotalSupply(&_DAOToken.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_DAOToken *DAOTokenTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _DAOToken.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_DAOToken *DAOTokenSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _DAOToken.Contract.Approve(&_DAOToken.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_DAOToken *DAOTokenTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _DAOToken.Contract.Approve(&_DAOToken.TransactOpts, spender, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_DAOToken *DAOTokenTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _DAOToken.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_DAOToken *DAOTokenSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _DAOToken.Contract.DecreaseAllowance(&_DAOToken.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_DAOToken *DAOTokenTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _DAOToken.Contract.DecreaseAllowance(&_DAOToken.TransactOpts, spender, subtractedValue)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_DAOToken *DAOTokenTransactor) Delegate(opts *bind.TransactOpts, delegatee common.Address) (*types.Transaction, error) {
	return _DAOToken.contract.Transact(opts, "delegate", delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_DAOToken *DAOTokenSession) Delegate(delegatee common.Address) (*types.Transaction, error) {
	return _DAOToken.Contract.Delegate(&_DAOToken.TransactOpts, delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_DAOToken *DAOTokenTransactorSession) Delegate(delegatee common.Address) (*types.Transaction, error) {
	return _DAOToken.Contract.Delegate(&_DAOToken.TransactOpts, delegatee)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_DAOToken *DAOTokenTransactor) DelegateBySig(opts *bind.TransactOpts, delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _DAOToken.contract.Transact(opts, "delegateBySig", delegatee, nonce, expiry, v, r, s)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_DAOToken *DAOTokenSession) DelegateBySig(delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _DAOToken.Contract.DelegateBySig(&_DAOToken.TransactOpts, delegatee, nonce, expiry, v, r, s)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_DAOToken *DAOTokenTransactorSession) DelegateBySig(delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _DAOToken.Contract.DelegateBySig(&_DAOToken.TransactOpts, delegatee, nonce, expiry, v, r, s)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_DAOToken *DAOTokenTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _DAOToken.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_DAOToken *DAOTokenSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _DAOToken.Contract.IncreaseAllowance(&_DAOToken.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_DAOToken *DAOTokenTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _DAOToken.Contract.IncreaseAllowance(&_DAOToken.TransactOpts, spender, addedValue)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_DAOToken *DAOTokenTransactor) Permit(opts *bind.TransactOpts, owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _DAOToken.contract.Transact(opts, "permit", owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_DAOToken *DAOTokenSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _DAOToken.Contract.Permit(&_DAOToken.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_DAOToken *DAOTokenTransactorSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _DAOToken.Contract.Permit(&_DAOToken.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_DAOToken *DAOTokenTransactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _DAOToken.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_DAOToken *DAOTokenSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _DAOToken.Contract.Transfer(&_DAOToken.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_DAOToken *DAOTokenTransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _DAOToken.Contract.Transfer(&_DAOToken.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_DAOToken *DAOTokenTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _DAOToken.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_DAOToken *DAOTokenSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _DAOToken.Contract.TransferFrom(&_DAOToken.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_DAOToken *DAOTokenTransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _DAOToken.Contract.TransferFrom(&_DAOToken.TransactOpts, from, to, amount)
}

// DAOTokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the DAOToken contract.
type DAOTokenApprovalIterator struct {
	Event *DAOTokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DAOTokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DAOTokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DAOTokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DAOTokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DAOTokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DAOTokenApproval represents a Approval event raised by the DAOToken contract.
type DAOTokenApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_DAOToken *DAOTokenFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*DAOTokenApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _DAOToken.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &DAOTokenApprovalIterator{contract: _DAOToken.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_DAOToken *DAOTokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *DAOTokenApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _DAOToken.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DAOTokenApproval)
				if err := _DAOToken.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_DAOToken *DAOTokenFilterer) ParseApproval(log types.Log) (*DAOTokenApproval, error) {
	event := new(DAOTokenApproval)
	if err := _DAOToken.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DAOTokenDelegateChangedIterator is returned from FilterDelegateChanged and is used to iterate over the raw logs and unpacked data for DelegateChanged events raised by the DAOToken contract.
type DAOTokenDelegateChangedIterator struct {
	Event *DAOTokenDelegateChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DAOTokenDelegateChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DAOTokenDelegateChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DAOTokenDelegateChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DAOTokenDelegateChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DAOTokenDelegateChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DAOTokenDelegateChanged represents a DelegateChanged event raised by the DAOToken contract.
type DAOTokenDelegateChanged struct {
	Delegator    common.Address
	FromDelegate common.Address
	ToDelegate   common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterDelegateChanged is a free log retrieval operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_DAOToken *DAOTokenFilterer) FilterDelegateChanged(opts *bind.FilterOpts, delegator []common.Address, fromDelegate []common.Address, toDelegate []common.Address) (*DAOTokenDelegateChangedIterator, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var fromDelegateRule []interface{}
	for _, fromDelegateItem := range fromDelegate {
		fromDelegateRule = append(fromDelegateRule, fromDelegateItem)
	}
	var toDelegateRule []interface{}
	for _, toDelegateItem := range toDelegate {
		toDelegateRule = append(toDelegateRule, toDelegateItem)
	}

	logs, sub, err := _DAOToken.contract.FilterLogs(opts, "DelegateChanged", delegatorRule, fromDelegateRule, toDelegateRule)
	if err != nil {
		return nil, err
	}
	return &DAOTokenDelegateChangedIterator{contract: _DAOToken.contract, event: "DelegateChanged", logs: logs, sub: sub}, nil
}

// WatchDelegateChanged is a free log subscription operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_DAOToken *DAOTokenFilterer) WatchDelegateChanged(opts *bind.WatchOpts, sink chan<- *DAOTokenDelegateChanged, delegator []common.Address, fromDelegate []common.Address, toDelegate []common.Address) (event.Subscription, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var fromDelegateRule []interface{}
	for _, fromDelegateItem := range fromDelegate {
		fromDelegateRule = append(fromDelegateRule, fromDelegateItem)
	}
	var toDelegateRule []interface{}
	for _, toDelegateItem := range toDelegate {
		toDelegateRule = append(toDelegateRule, toDelegateItem)
	}

	logs, sub, err := _DAOToken.contract.WatchLogs(opts, "DelegateChanged", delegatorRule, fromDelegateRule, toDelegateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DAOTokenDelegateChanged)
				if err := _DAOToken.contract.UnpackLog(event, "DelegateChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateChanged is a log parse operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_DAOToken *DAOTokenFilterer) ParseDelegateChanged(log types.Log) (*DAOTokenDelegateChanged, error) {
	event := new(DAOTokenDelegateChanged)
	if err := _DAOToken.contract.UnpackLog(event, "DelegateChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DAOTokenDelegateVotesChangedIterator is returned from FilterDelegateVotesChanged and is used to iterate over the raw logs and unpacked data for DelegateVotesChanged events raised by the DAOToken contract.
type DAOTokenDelegateVotesChangedIterator struct {
	Event *DAOTokenDelegateVotesChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DAOTokenDelegateVotesChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DAOTokenDelegateVotesChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DAOTokenDelegateVotesChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DAOTokenDelegateVotesChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DAOTokenDelegateVotesChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DAOTokenDelegateVotesChanged represents a DelegateVotesChanged event raised by the DAOToken contract.
type DAOTokenDelegateVotesChanged struct {
	Delegate        common.Address
	PreviousBalance *big.Int
	NewBalance      *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterDelegateVotesChanged is a free log retrieval operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)
func (_DAOToken *DAOTokenFilterer) FilterDelegateVotesChanged(opts *bind.FilterOpts, delegate []common.Address) (*DAOTokenDelegateVotesChangedIterator, error) {

	var delegateRule []interface{}
	for _, delegateItem := range delegate {
		delegateRule = append(delegateRule, delegateItem)
	}

	logs, sub, err := _DAOToken.contract.FilterLogs(opts, "DelegateVotesChanged", delegateRule)
	if err != nil {
		return nil, err
	}
	return &DAOTokenDelegateVotesChangedIterator{contract: _DAOToken.contract, event: "DelegateVotesChanged", logs: logs, sub: sub}, nil
}

// WatchDelegateVotesChanged is a free log subscription operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)
func (_DAOToken *DAOTokenFilterer) WatchDelegateVotesChanged(opts *bind.WatchOpts, sink chan<- *DAOTokenDelegateVotesChanged, delegate []common.Address) (event.Subscription, error) {

	var delegateRule []interface{}
	for _, delegateItem := range delegate {
		delegateRule = append(delegateRule, delegateItem)
	}

	logs, sub, err := _DAOToken.contract.WatchLogs(opts, "DelegateVotesChanged", delegateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DAOTokenDelegateVotesChanged)
				if err := _DAOToken.contract.UnpackLog(event, "DelegateVotesChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateVotesChanged is a log parse operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)
func (_DAOToken *DAOTokenFilterer) ParseDelegateVotesChanged(log types.Log) (*DAOTokenDelegateVotesChanged, error) {
	event := new(DAOTokenDelegateVotesChanged)
	if err := _DAOToken.contract.UnpackLog(event, "DelegateVotesChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DAOTokenEIP712DomainChangedIterator is returned from FilterEIP712DomainChanged and is used to iterate over the raw logs and unpacked data for EIP712DomainChanged events raised by the DAOToken contract.
type DAOTokenEIP712DomainChangedIterator struct {
	Event *DAOTokenEIP712DomainChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DAOTokenEIP712DomainChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DAOTokenEIP712DomainChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DAOTokenEIP712DomainChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DAOTokenEIP712DomainChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DAOTokenEIP712DomainChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DAOTokenEIP712DomainChanged represents a EIP712DomainChanged event raised by the DAOToken contract.
type DAOTokenEIP712DomainChanged struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEIP712DomainChanged is a free log retrieval operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_DAOToken *DAOTokenFilterer) FilterEIP712DomainChanged(opts *bind.FilterOpts) (*DAOTokenEIP712DomainChangedIterator, error) {

	logs, sub, err := _DAOToken.contract.FilterLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return &DAOTokenEIP712DomainChangedIterator{contract: _DAOToken.contract, event: "EIP712DomainChanged", logs: logs, sub: sub}, nil
}

// WatchEIP712DomainChanged is a free log subscription operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_DAOToken *DAOTokenFilterer) WatchEIP712DomainChanged(opts *bind.WatchOpts, sink chan<- *DAOTokenEIP712DomainChanged) (event.Subscription, error) {

	logs, sub, err := _DAOToken.contract.WatchLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DAOTokenEIP712DomainChanged)
				if err := _DAOToken.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEIP712DomainChanged is a log parse operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_DAOToken *DAOTokenFilterer) ParseEIP712DomainChanged(log types.Log) (*DAOTokenEIP712DomainChanged, error) {
	event := new(DAOTokenEIP712DomainChanged)
	if err := _DAOToken.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DAOTokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the DAOToken contract.
type DAOTokenTransferIterator struct {
	Event *DAOTokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DAOTokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DAOTokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DAOTokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DAOTokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DAOTokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DAOTokenTransfer represents a Transfer event raised by the DAOToken contract.
type DAOTokenTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_DAOToken *DAOTokenFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*DAOTokenTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _DAOToken.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &DAOTokenTransferIterator{contract: _DAOToken.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_DAOToken *DAOTokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *DAOTokenTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _DAOToken.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DAOTokenTransfer)
				if err := _DAOToken.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_DAOToken *DAOTokenFilterer) ParseTransfer(log types.Log) (*DAOTokenTransfer, error) {
	event := new(DAOTokenTransfer)
	if err := _DAOToken.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
